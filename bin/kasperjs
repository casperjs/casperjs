#!/usr/bin/env python

import json
import os
import subprocess
import sys

def test_cmd(cmd):
    try:
        return subprocess.check_output([__file__] + cmd.split(' '))
    except subprocess.CalledProcessError as err:
        sys.stderr.write('FAIL: %s\n' % ' '.join(err.cmd))
        sys.stderr.write('      %s\n' % err.output)
        sys.exit(1)

def resolve(path):
    if os.path.islink(path):
        path = os.path.join(os.path.dirname(path), os.readlink(path))
        return resolve(path)
    return path

PHANTOMJS_NATIVE_ARGS = [
    'cookies-file',
    'config',
    'debug',
    'disk-cache',
    'ignore-ssl-errors',
    'load-images',
    'load-plugins',
    'local-storage-path',
    'local-storage-quota',
    'local-to-remote-url-access',
    'max-disk-cache-size',
    'output-encoding',
    'proxy',
    'proxy-auth',
    'proxy-type',
    'remote-debugger-port',
    'remote-debugger-autorun',
    'script-encoding',
    'web-security',
]
kasper_ARGS = []
kasper_PATH = os.path.abspath(os.path.join(os.path.dirname(resolve(__file__)), '..'))
PHANTOMJS_ARGS = []
SYS_ARGS = sys.argv[1:]

if len(SYS_ARGS) and SYS_ARGS[0] == '__selfcommandtest':
    print('Starting Python executable tests...')
    pkg_version = json.loads(open('package.json').read()).get('version')
    scripts_path = os.path.join(kasper_PATH, 'tests', 'commands')
    assert(test_cmd('--help').find(pkg_version) > -1)
    assert(test_cmd('--version').strip() == pkg_version)
    assert(test_cmd(os.path.join(scripts_path, 'script.js')) == 'it works\n')
    test_output = test_cmd('test --no-colors ' + os.path.join(scripts_path, 'mytest.js'))
    assert('PASS ok1' in test_output)
    assert('PASS ok2' in test_output)
    assert('PASS ok3' in test_output)
    print('Python executable tests passed.')
    sys.exit(0)

for arg in SYS_ARGS:
    found = False
    for native in PHANTOMJS_NATIVE_ARGS:
        if arg.startswith('--%s' % native):
            PHANTOMJS_ARGS.append(arg)
            found = True
    if not found:
        kasper_ARGS.append(arg)

kasper_COMMAND = os.environ.get('PHANTOMJS_EXECUTABLE', 'phantomjs').split(' ')
kasper_COMMAND.extend(PHANTOMJS_ARGS)
kasper_COMMAND.extend([
    os.path.join(kasper_PATH, 'bin', 'bootstrap.js'),
    '--kasper-path=%s' % kasper_PATH,
    '--cli'
])
kasper_COMMAND.extend(kasper_ARGS)

try:
    os.execvp(kasper_COMMAND[0], kasper_COMMAND)
except OSError as err:
    print(('Fatal: %s; did you install phantomjs?' % err))
    sys.exit(1)
